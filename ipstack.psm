
; hardware definitions
NET_READ   			 DSIN	 $00 ;, "net_input.txt"
NET_STATUS	   		 DSIN	 $01 ;, "net_status.txt"
NET_WRITE	   		 DSOUT	 $01 ;, "net_output.txt"
NET_CTRL			 DSOUT	 $02 ;, "net_ctrl.txt"

NET_FILTER0			 EQU	 $00
NET_FILTER1			 EQU	 $01
NET_FILTER_SET		 EQU	 $04
NET_FILTER_MASK		 EQU	 $08

NET_CTRL_RST   		 EQU	 $01  ; reset network hardware (has to set high for some time)
NET_CTRL_READ_DONE	 EQU	 $02  ; notify adapter to receive the next packet
NET_CTRL_SEND_FRAME	 EQU	 $04  ; send frame to wire
NET_CTRL_CS_BEGIN	 EQU	 $08  ; begin calculating IP checksum
NET_CTRL_CS_SETADDR	 EQU	 $10  ; set address to store checksum to
NET_CTRL_CS_END		 EQU	 $20  ; store checksum
NET_CTRL_CS_ONLY	 EQU	 $40  ; use data for checksum but do not include the data for transfer

NET_STATUS_RX_VALID	 EQU	 $80  ; frame received and available for reading
NET_STATUS_TX_BUSY	 EQU	 $40  ; tx unit is busy transmitting the last frame

LOGIC_ADDR_BEGIN	 DSOUT	 $21  ; offset shift register
LOGIC_ADDR_END		 DSOUT	 $22  ; end offset shift register
LOGIC_BEGIN			 DSOUT	 $24  ; start read or write operation
LOGIC_STATUS		 DSIN	 $20  ; read busy status

LOGIC_BEGIN_GET		 EQU	 0	  ; logic -> nic
LOGIC_BEGIN_PUT		 EQU	 1	  ; nic -> logic
LOGIC_STATUS_BUSY	 EQU	 1

LED					 DSOUT	 $40

; constants
tcp_port	   EQU	 81

; variables used for packet parsing
dmac   		   EQU	 $00
smac   		   EQU	 $06

; variables used for replies
arp_static	   EQU	 $10 ; 7b
arp_source	   EQU	 $17 ; 10b

; varibales used for ip
ip_saddr	   EQU	 $10 ; 4b

; variables used for tcp
tcp_sport	   EQU	 $14 ; 2b - source port sent by client
tcp_seq		   EQU	 $16 ; 4b - sequence number sent by client
tcp_ack		   EQU	 $1A ; 4b - ack number sent by client

; global variables
BP_OFFSET	   EQU	 $1E ; 4b - current logic offset
BP_STATE	   EQU	 $22 ; 1b - binary protocol state
;BP_SIZE 	   EQU	 $22 ; 2b - binary protocol byte counter (depricated)

TCP_PEER_IP	   EQU	 $24 ; 4b - connected ip address
TCP_PEER_PORT  EQU	 $28 ; 2b - connected port
TCP_PEER_R_SEQ EQU	 $2A ; 4b - next expected client sequence number (remote)
TCP_PEER_L_SEQ EQU	 $2E ; 4b - sequence number for next packet (local)

TCP_TIMEOUT	   EQU	 $32 ; 3b - connection timeout
tcp_state	   EQU	 $35 ; tcp connection state (0 = listen, 1 = syn received, 2 = established)
mymac  		   EQU	 $36
myip   		   EQU	 $3C

; simulator is buggy. first port read is always zero
;in	  s0, NET_READ

; start to reset ethernet adapter
load	s0, NET_CTRL_RST
out		s0, NET_CTRL

; store my ip and mac in memory
load	s0, 10	  	  	 	   	 ; IP
load	s1, 0
load	s2, 0
load	s3, 2
load	s4, $02					 ; MAC namespace (locally administered)
load	s5, $00
load	s6, $48
load	s7, s1 					 ; MAC UID
load	s8, s2
load	s9, s3

store	s0, myip
store	s1, myip + 1
store	s2, myip + 2
store	s3, myip + 3
store	s4, mymac
store	s5, mymac + 1
store	s6, mymac + 2
store	s7, mymac + 3
store	s8, mymac + 4
store	s9, mymac + 5

; initical tcp state
load	s0, 0
store	s0, tcp_state

load	s0, 0	 	  ; stop ethernet adapter reset
out		s0, NET_CTRL

load	s0, NET_FILTER0 | NET_FILTER_SET
call	FILTER_ARP_FRAMES
load	s0, NET_FILTER1 | NET_FILTER_SET
call	FILTER_DESTMAC_FRAMES

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

jump	NEXT_PACKET_WAIT_LOOP  ; skip read done ctrl for first packet
NEXT_PACKET:
load	s0, NET_CTRL_READ_DONE
out		s0, NET_CTRL
fetch	s0, tcp_state
;out		s0, LED		 		   ; debug tcp state
NEXT_PACKET_WAIT_LOOP:
in		s1, NET_STATUS
test	s1, NET_STATUS_RX_VALID
jump	NZ, NEW_PACKET
comp	s0, 0
jump	Z, NEXT_PACKET_WAIT_LOOP
fetch	s2, TCP_TIMEOUT
fetch	s3, TCP_TIMEOUT + 1
fetch	s4, TCP_TIMEOUT + 2
add		s2, 1
addc	s3, 0
addc	s4, 0
store	s2, TCP_TIMEOUT
store	s3, TCP_TIMEOUT + 1
store	s4, TCP_TIMEOUT + 2
jump	C, TCP_RESET_STATE
jump	NEXT_PACKET_WAIT_LOOP

NEW_PACKET:
; read mac to mem
load  s0, 12
load  s1, dmac
call READ_NET

; read frame type. 0800 = IPv4, 0806 = ARP
in     s0, NET_READ
comp   s0, 8
jump   NZ, NEXT_PACKET
in     s0, NET_READ
comp   s0, 0
jump   Z, IP
comp   s0, 6
jump   Z, ARP
jump   NEXT_PACKET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ARP reply
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; stack variables

ARP:
; this is an arp frame
load   s0, 7
load   s1, arp_static
call   READ_NET
in	   s0, NET_READ
comp   s0, 1  	 ; arp request
jump   NZ, NEXT_PACKET

; read source ip and mac to mem
load   s0, 10
load   s1, arp_source
call   READ_NET

; scip search mac (00:00:00:00:00:00)
load   s0, 6
call   SKIP_NET
; compare query IP to my IP
load   s0, 4
load   s1, myip
call   COMPARE_NET
test   s2, 1
jump   Z, NEXT_PACKET

; this is indeed an ARP request targeted at us.
load   s4, 6 ; ARP protocol id
call   WRITE_ETHERNET
load   s0, 7
load   s1, arp_static
call   WRITE_NET	 ; first static 7b of arp packet
load   s0, 2
out	   s0, NET_WRITE	 ; arp type 2 == reply
load   s0, 10
load   s1, mymac	
call   WRITE_NET	 ; arp source mac and ip
load   s0, 10
load   s1, arp_source
call   WRITE_NET	 ; arp target mac and ip

load   s0, 18		 ; add 18 zero bytes for minimum frame length padding
call   WRITE_NET_ZERO

load   s0, NET_CTRL_SEND_FRAME
out	   s0, NET_CTRL
jump   NEXT_PACKET	 ; done

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IP packet
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; sE: header size
; sC, sD: payload size
IP:
in     sE, NET_READ ; read and extract packet header size
and	   sE, $F
sl0	   sE
sl0	   sE  	   ; len *= 4
in	   s0, NET_READ ; ignored
in	   sC, NET_READ
in	   sD, NET_READ
sub	   sD, sE
subc   sC, 0   ; payload len = total len - header len
load   s0, 5
call   SKIP_NET ; ignore 5 bytes
in	   sA, NET_READ	; read protocol number
load   s0, 2
call   SKIP_NET ; ignore checksum
load   s0, 4
load   s1, ip_saddr
call   READ_NET ; read source ip
load   s0, 4
load   s1, myip
call   COMPARE_NET ; compare ip address
test   s2, 1
jump   Z, NEXT_PACKET ; skip packet if not addressed to us
load   s0, sE
sub	   s0, 20
call   SKIP_NET ; ignore remaining header in case there is an optional one

; check protocol id
comp   sA, 1
jump   Z, IP_ICMP
comp   sA, 6
jump   Z, IP_TCP
jump   NEXT_PACKET	 ; unknown layer 4 protocol

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IP_ICMP:
comp	sC, 0
jump	NZ, NEXT_PACKET	; drop packets larger than 255 bytes
in		s0, NET_READ
comp	s0, 8  		   ; icmp echo = 8
jump	NZ, NEXT_PACKET
load	s0, 3
call	SKIP_NET	   ; skip code and checksum

; write ip header
load	s5, 1
load	s6, sC	
load	s7, sD	 	   	; reply package has same payload length as request
call	WRITE_IP_HEAD

; write ICMP packet
load	s0, NET_CTRL_CS_BEGIN
out		s0, NET_CTRL
load	s3, 0
out		s3, NET_WRITE	 	 ; ICMP type 0 = echo reply
out		s3, NET_WRITE		 ; ICMP code

load	s0, NET_CTRL_CS_SETADDR
out		s0, NET_CTRL
out		s3, NET_WRITE
out		s3, NET_WRITE		 ; ICMP checksum
sub		sD, 4		 		 ; payload size = icmp packet size - 4b for echo header
IP_ICMP_ECHO_LOOP:
in		s0, NET_READ
out		s0, NET_WRITE
sub		sD, 1
jump	NZ, IP_ICMP_ECHO_LOOP

load	s0, NET_CTRL_CS_END
out		s0, NET_CTRL
load	s0, NET_CTRL_SEND_FRAME
out		s0, NET_CTRL
jump   NEXT_PACKET; done

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IP_TCP:
load   s0, 3			; read two bytes and skip one
load   s1, tcp_sport
call   READ_NET			; read source port for reply
in	   sF, NET_READ		; read destination port
load   s0, sF
sub	   s0, 80
jump   C, NEXT_PACKET
comp   s0, 3
jump   NC, NEXT_PACKET	; compare destination port to our port range (80-82)
load   s0, 8
load   s1, tcp_seq
call   READ_NET	  		; read seq and ack number
in	   s6, NET_READ		; read data offset
sr0	   s6
sr0	   s6
sub	   sD, s6
subc   sC, 0 		  ; sub tcp header from ip payload size

in	   s9, NET_READ		; read flags
fetch  s0, tcp_state
comp   s0, 0
jump   Z, TCP_LISTEN

; check seq number if not in listen state
; this may be due to another connection packet or packet loss
; we will have to request a resend in case of packet loss
load   s0, ip_saddr
load   s1, TCP_PEER_IP
load   s2, 6
call   MEM_CMP		  	  ; compare source ip and port to connected peer
jump   NZ, NEXT_PACKET	  
load   s2, 8			  ; s0 and s1 are set by last cmp call
call   MEM_CMP
jump   NZ, TCP_RESET_STATE ; unexpected sequence number (TODO: request resend)

load   s2, 0
store  s2, TCP_TIMEOUT
store  s2, TCP_TIMEOUT + 1
store  s2, TCP_TIMEOUT + 2	; reset

test   s9, $04
jump   NZ, TCP_RESET_STATE ; reset connection if RST
test   s9, $10
jump   Z, TCP_RESET_STATE ; reset connection if no ACK

fetch  s0, tcp_state
comp   s0, 1
jump   Z, TCP_SYNSENT
comp   s0, 2
jump   Z, TCP_CONNECTED
jump   NEXT_PACKET

;; TCP state connected
TCP_CONNECTED:
load	s0, s6
sub		s0, 14		  ; we already read 14b of tcp header
call	SKIP_NET	  ; skip tcp header
;load	s0, sC
;or		s0, sD
;jump	Z, NEXT_PACKET ; no payload => no response
jump	SERVER_PARSE   ; begin content parsing

;; TCP state syn sent
TCP_SYNSENT:
; we should check some data here but there is no reply and no sync increment during hanshake
jump	TCP_NEXT_STATE

;; TCP state listen
TCP_LISTEN:
test	s9, 2	   		; check syn flag
jump	Z, NEXT_PACKET	; only accept new connections in listen state

; generate new sequence number
fetch	s0, tcp_seq
fetch	s1, tcp_seq + 1
fetch	s2, tcp_seq + 2
fetch	s3, tcp_seq + 3
xor		s0, $55
xor		s1, $A7
xor		s2, $48
xor		s3, $87		   		  ; some random keys for randomisation (very insecure)
store	s0, tcp_ack
store	s1, tcp_ack + 1
store	s2, tcp_ack + 2
store	s3, tcp_ack + 3

load	s0, TCP_PEER_IP
load	s1, ip_saddr
load	s2, 14
call	MEM_CPY		   		  ; save peer state for connection tracking

load	s8, $12			; ACK, SYN
call	WRITE_TCP_HEAD_EMPTY_AND_SEND
load	s0, NET_FILTER_SET | NET_FILTER1
call	FILTER_SRCMAC_FRAMES
jump	TCP_NEXT_STATE	; nop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

TCP_NEXT_STATE:
; change state
fetch	s0, tcp_state
add		s0, 1
store	s0, tcp_state
jump    NEXT_PACKET  ; done

TCP_RESET_STATE:
fetch	s0, tcp_state
comp	s0, 2
jump	NZ, TCP_RESET_STATE_NOT_CONNECTED
; we are connected, so we should at least notify our peer about this
load 	sC, 0
load	sD, 0		; pretend no incoming payload
load	s8, $14		; ACK, RST
call	WRITE_TCP_HEAD_EMPTY_AND_SEND

TCP_RESET_STATE_NOT_CONNECTED:
call	TCP_CONNECTION_CLOSED
jump	NEXT_PACKET

TCP_CONNECTION_CLOSED:
load	s0, NET_FILTER_SET | NET_FILTER1
call	FILTER_DESTMAC_FRAMES
load	s0, 0
store	s0, tcp_state
store	s0, BP_STATE
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SERVER
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SERVER_PARSE:
load	s6, s9				   ; tcp flags
load	s7, sC				   ; bytes in tcp packet												
load	s8, sD
comp	sF, 81				   ; binary put port 81
jump	Z, SERVER_BP_PUT_BEGIN
comp	sF, 82				   ; binary get port 82
jump	Z, SERVER_BP_GET_BEGIN
jump	NEXT_PACKET

SERVER_BP_INIT:
; new package (setup logic unit and store address)
load	s0, 1
store	s0, BP_STATE

in	  	s0, NET_READ
in	  	s1, NET_READ
in	  	s2, NET_READ
in	  	s3, NET_READ
out		s0, LOGIC_ADDR_BEGIN
out		s1, LOGIC_ADDR_BEGIN
out		s2, LOGIC_ADDR_BEGIN
out		s3, LOGIC_ADDR_BEGIN
store	s0, BP_OFFSET
store	s1, BP_OFFSET + 1
store	s2, BP_OFFSET + 2
store	s3, BP_OFFSET + 3
sub		s8, 4							; sub 4byte header size
subc	s7, 0

ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SERVER_BP_PUT_BEGIN:
fetch	s0, BP_STATE
or		s0, s0
call	Z, SERVER_BP_INIT

; calculate end address and setup logic unit
fetch	s0, BP_OFFSET
fetch	s1, BP_OFFSET + 1
fetch	s2, BP_OFFSET + 2
fetch	s3, BP_OFFSET + 3
add		s3, s8				   ; bytes in tcp packet
addc	s2, s7
addc	s1, 0
addc	s0, 0
out		s0, LOGIC_ADDR_END
out		s1, LOGIC_ADDR_END
out		s2, LOGIC_ADDR_END
out		s3, LOGIC_ADDR_END
load	s4, LOGIC_BEGIN_PUT
out		s4, LOGIC_BEGIN
store	s0, BP_OFFSET
store	s1, BP_OFFSET + 1
store	s2, BP_OFFSET + 2
store	s3, BP_OFFSET + 3

; wait until DMA unit has finished reading
SERVER_PUT_LOOP:
in		s0, LOGIC_STATUS
test	s0, LOGIC_STATUS_BUSY
jump	NZ, SERVER_PUT_LOOP

; respond with ACK
load	s8, s9
and		s8, $11 ; FIN & ACK
call	WRITE_TCP_HEAD_EMPTY_AND_SEND

test	s8, $01 ; FIN
jump	Z, NEXT_PACKET
jump	TCP_RESET_STATE_NOT_CONNECTED

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SERVER_BP_GET_BEGIN:
load	s6, sC
load	s7, sD
sub		s7, 6
subc	s6, 0
jump	NC, SERVER_BP_GET_RESPOND		; respond if at least 6 bytes in packet																																															
test	s9, $01 ; FIN
jump	Z, NEXT_PACKET			 		; ignore ack's																																																		
load	s8, $10 ; ACK					; finish closing procedure
call	WRITE_TCP_HEAD_EMPTY_AND_SEND
jump	TCP_RESET_STATE_NOT_CONNECTED

SERVER_BP_GET_RESPOND:
call	SERVER_BP_INIT
in		s6, NET_READ  			; size																																																				
in		s7, NET_READ

; calculate end address and setup logic unit
fetch	s0, BP_OFFSET
fetch	s1, BP_OFFSET + 1
fetch	s2, BP_OFFSET + 2
fetch	s3, BP_OFFSET + 3
add		s3, s7
addc	s2, s6
addc	s1, 0
addc	s0, 0
out		s0, LOGIC_ADDR_END
out		s1, LOGIC_ADDR_END
out		s2, LOGIC_ADDR_END
out		s3, LOGIC_ADDR_END

load	s8, $11 ; FIN & ACK
call	WRITE_TCP_HEAD	  		  		; write header
load	s4, LOGIC_BEGIN_GET
out		s4, LOGIC_BEGIN	   				; fill data bytes

; wait until DMA unit has finished reading
SERVER_GET_LOOP:
in		s0, LOGIC_STATUS
test	s0, LOGIC_STATUS_BUSY
jump	NZ, SERVER_GET_LOOP

load	s0, NET_CTRL_CS_END
out		s0, NET_CTRL	   				; store checksum
load	s0, 6
call	WRITE_NET_ZERO	 		 		; padd up to 60b minimal frame length
load	s0, NET_CTRL_SEND_FRAME
out		s0, NET_CTRL		   			; send frame

jump	NEXT_PACKET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WRITE_TCP_HEAD_EMPTY_AND_SEND:
; s8 - tcp flags
; see WRITE_TCP_HEAD for register usage
load  	s6, 0
load	s7, 0
call	WRITE_TCP_HEAD

load	s0, 6
call	WRITE_NET_ZERO	 		  ; padd up to 60b minimal frame length

load	s0, NET_CTRL_CS_END
out		s0, NET_CTRL
load	s0, NET_CTRL_SEND_FRAME
out		s0, NET_CTRL
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; s0!, s1!, s2!, s3!, s4!, s5!
; s6, s7 - payload length
; s8 - tcp flags
; s9 - recv tcp flags
WRITE_TCP_HEAD:
load	s5, 6			; tcp
add		s7, 20			; add tcp header size
addc	s6, 0
call	WRITE_IP_HEAD

load	s1, NET_CTRL_CS_BEGIN | NET_CTRL_CS_ONLY
out		s1, NET_CTRL
;;;;;;;; pseudo header
load	s0, 4
load	s1, myip
call	WRITE_NET	 ; source ip
load	s0, 4
load	s1, TCP_PEER_IP ; destination ip
call	WRITE_NET
load	s0, 0
load	s1, 6
out		s0, NET_WRITE
out		s1, NET_WRITE  ; protocol
out		s6, NET_WRITE
out		s7, NET_WRITE  ; TCP head + data byte length
out		s0, NET_CTRL
;;;;;;;;

load	s5, 0
out		s5, NET_WRITE
out		sF, NET_WRITE	 	; source port
load	s0, 2
load	s1, TCP_PEER_PORT
call	WRITE_NET	 	; destination port

sub		s7, 20
subc	s6, 0 			; restore payload size

; calc seq number
fetch   s0, TCP_PEER_L_SEQ
fetch   s1, TCP_PEER_L_SEQ + 1
fetch   s2, TCP_PEER_L_SEQ + 2
fetch   s3, TCP_PEER_L_SEQ + 3
out		s0, NET_WRITE
out		s1, NET_WRITE
out		s2, NET_WRITE
out		s3, NET_WRITE
test	s8, 3		   	; +1 if syn or fin is set
addc	s3, s7			; increment sequence number by number of bytes sent
addc	s2, s6			
addc	s1, 0
addc	s0, 0
store   s0, TCP_PEER_L_SEQ
store   s1, TCP_PEER_L_SEQ + 1
store   s2, TCP_PEER_L_SEQ + 2
store   s3, TCP_PEER_L_SEQ + 3

; calc ack number
fetch   s0, TCP_PEER_R_SEQ
fetch   s1, TCP_PEER_R_SEQ + 1
fetch   s2, TCP_PEER_R_SEQ + 2
fetch   s3, TCP_PEER_R_SEQ + 3
test	s9, 3		   	; +1 if syn or fin is set
addc	s3, sD			; increment sequence number by number of bytes received
addc	s2, sC			
addc	s1, 0
addc	s0, 0
out		s0, NET_WRITE
out		s1, NET_WRITE
out		s2, NET_WRITE
out		s3, NET_WRITE
store   s0, TCP_PEER_R_SEQ
store   s1, TCP_PEER_R_SEQ + 1
store   s2, TCP_PEER_R_SEQ + 2
store   s3, TCP_PEER_R_SEQ + 3

load	s0, $50
out		s0, NET_WRITE	; header size
out		s8, NET_WRITE	; tcp flags
load	s0, 2
out		s0, NET_WRITE
load	s0, 0
out		s0, NET_WRITE	; 512b window size

load	s1, NET_CTRL_CS_SETADDR
out		s1, NET_CTRL
load	s0, 0
out		s0, NET_WRITE
out		s0, NET_WRITE	; checksum

out		s0, NET_WRITE
out		s0, NET_WRITE	; urgent pointer
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WRITE_IP_HEAD:
; s0!, s1!, s2!, s3!, s4!
; s5 - protocol id (1 = ICMP, 6 = TCP)
; s6, s7 - payload length
load    s4, 0 ; IP protocol id
call    WRITE_ETHERNET

load	s0, NET_CTRL_CS_BEGIN
out		s0, NET_CTRL
load	s0, $45
out		s0, NET_WRITE	 	 ; ip version and header size
load	s3, 0
out		s3, NET_WRITE		 ; DSCP, ECN
load	s0, s6
load	s1, s7
add		s1, 20
addc	s0, 0
out		s0, NET_WRITE
out		s1, NET_WRITE		 ; total length (header + payload)
load	s0, $55
out		s0, NET_WRITE
out		s0, NET_WRITE		 ; IP identification
out		s3, NET_WRITE		 ; flags
out		s3, NET_WRITE		 ; fragment offset
load	s0, 128		
out		s0, NET_WRITE		 ; TTL
load	s0, 1
out		s5, NET_WRITE		 ; protocol

load	s0, NET_CTRL_CS_SETADDR
out		s0, NET_CTRL
out		s3, NET_WRITE
out		s3, NET_WRITE		 ; checksum

load	s0, 4
load	s1, myip
call	WRITE_NET	 ; source ip
load	s0, 4
load	s1, ip_saddr ; destination ip
call	WRITE_NET

load	s0, NET_CTRL_CS_END
out		s0, NET_CTRL
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WRITE_ETHERNET:
; s0!, s1!, s2!
; s4 - protocol low byte (0 = IP, 6 = ARP)
in	   s0, NET_STATUS
test   s0, NET_STATUS_TX_BUSY
jump   NZ, WRITE_ETHERNET	  	  ; wait until network adapter is ready for new frame

load   s0, 6
load   s1, smac	
call   WRITE_NET	 ; destination mac
load   s0, 6
load   s1, mymac
call   WRITE_NET	 ; source mac
load   s0, 8
out	   s0, NET_WRITE		 ; protocol type high
out	   s4, NET_WRITE		 ; protocol type low
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FILTER_ARP_FRAMES:
; s0! - filter port (NET_FILTERX | NET_FILTER_SET)
; s1!, s2!, s3!
load   	s2, s0
load	s0, 0
out		s0, s2
out		s0, s2			  ; padding to 16b
or		s2, NET_FILTER_MASK
load	s0, $06
out		s0, s2
load	s1, $08
out		s1, s2 			  ; filter ARP protocol
load	s0, 6
load	s1, 0
and		s2, ~NET_FILTER_MASK;
call	WRITE_PORT_CONST  ; ignore source mac
load	s0, 6
load	s1, $FF
or		s2, NET_FILTER_MASK
jump	WRITE_PORT_CONST  ; broadcasts only

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FILTER_DESTMAC_FRAMES:
; s0! - filter port (NET_FILTERX | NET_FILTER_SET)
; s1!, s2!, s3!
load    s2, s0
load	s0, 3
load	s1, 0
call	WRITE_PORT_CONST		 ; padding to 16b
or		s2, NET_FILTER_MASK
load	s0, $08
out		s0, s2 			   		 ; select IP and ARP protocol
load	s0, 6
load	s1, 0
and		s2, ~NET_FILTER_MASK;
call	WRITE_PORT_CONST  ; ignore source mac
load	s0, 6
load	s1, mymac + 5
or		s2, NET_FILTER_MASK
jump	WRITE_PORT_REV	  ; addressed to my mac only

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FILTER_SRCMAC_FRAMES:
; s0! - filter port (NET_FILTERX | NET_FILTER_SET)
; s1!, s2!, s3!
load    s2, s0
load	s0, 3
load	s1, 0
call	WRITE_PORT_CONST		 ; padding to 16b
or		s2, NET_FILTER_MASK
load	s0, $08
out		s0, s2 			   		 ; select IP and ARP protocol
load	s0, 12
load	s1, smac + 5
jump	WRITE_PORT_REV			 ; addressed like the last received frame

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SKIP_NET:
; s0! - number of bytes to skip
; s1!
comp  	s0, 0
SKIP_NET_LOOP:
ret		Z
in		s1, NET_READ
sub		s0, 1
jump	SKIP_NET_LOOP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
READ_NET:
; s0! - bytes to read
; s1! - address to store to (s1 + s0 after execution)
; s2!
in	  	s2, NET_READ
store	s2, s1
add		s1, 1
sub		s0, 1
jump	NZ, READ_NET
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WRITE_NET:
; s0! - bytes to write
; s1! - address to load from (s1 + s0 after execution)
; s2!
fetch 	s2, s1
out		s2, NET_WRITE
add		s1, 1
sub		s0, 1
jump	NZ, WRITE_NET
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WRITE_NET_ZERO:
; s0! - bytes to write
; s1!
load    s1, 0
comp	s0, 0
WRITE_NET_ZERO_LOOP:
ret		Z
out		s1, NET_WRITE
sub		s0, 1
jump	WRITE_NET_ZERO_LOOP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMPARE_NET:
; s0! - bytes to read
; s1! - address to load from (s1 + s0 after execution)
; s2! - returns 1 if equal and 2 if equal to FF
; s3!
; s4!
load  	s2, 3
COMPARE_NET_LOOP:
in	  	s3, NET_READ
comp	s3, $FF
jump	Z, COMPARE_NET_TEST
and		s2, $FD ; ~2
COMPARE_NET_TEST:
fetch 	s4, s1
comp	s4, s3
jump	Z, COMPARE_NET_NEXT
and		s2, $FE ; ~1
COMPARE_NET_NEXT:
add		s1, 1
sub		s0, 1
jump	NZ, COMPARE_NET_LOOP
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WRITE_PORT_REV:
; s0! - bytes to write
; s1! - address to load from
; s2 - port to write to
; s3!
fetch 	s3, s1
out		s3, s2
sub		s1, 1
sub		s0, 1
jump	NZ, WRITE_PORT_REV
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WRITE_PORT_CONST:
; s0! - bytes to write
; s1! - value to write
; s2 - port to write to
out		s1, s2
sub		s0, 1
jump	NZ, WRITE_PORT_CONST
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MEM_CPY:
; s0! - destination address
; s1! - source address
; s2! - number of bytes to copy
; s3!
fetch 	s3, s1
store	s3, s0
add		s0, 1
add		s1, 1
sub		s2, 1
jump	NZ, MEM_CPY
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MEM_CMP: ; Zero flag is set if equal
; s0! - address1
; s1! - address2
; s2! - number of bytes to compare
; s3!, s4!
fetch 	s3, s0
fetch	s4, s1
comp	s3, s4
ret		NZ
add		s0, 1
add		s1, 1
sub		s2, 1
jump	NZ, MEM_CMP
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MATH_MIN:
; s0!,s1! - in A out min(A,B)
; s2 ,s3  - in B
comp	  s2, s0
jump	  C, MATH_MIN_B		 ; a > b
ret		  NZ 				 ; a != b
comp	  s3, s1
ret		  NC  				 ; a <= b
MATH_MIN_B:
load	   s0, s2
load	   s1, s3
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MATH_COMP:
; s0,s1 - in A
; s2,s3 - in B
; s4! = 0 if equal, s5!
load   s4, s0
xor	   s4, s2
load   s5, s1
xor	   s5, s3
or	   s4, s5
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

isp:
reti enable

ORG $3FF
jump isp
