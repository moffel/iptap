
; hardware definitions
NET_READ   			 DSIN	 $00 ;, "net_input.txt"
NET_STATUS	   		 DSIN	 $01 ;, "net_status.txt"
NET_WRITE	   		 DSOUT	 $01 ;, "net_output.txt"
NET_CTRL			 DSOUT	 $02 ;, "net_ctrl.txt"

NET_CTRL_RST   		 EQU	 $01  ; reset network hardware (has to set high for some time)
NET_CTRL_READ_DONE	 EQU	 $02  ; notify adapter to receive the next packet
NET_CTRL_SEND_FRAME	 EQU	 $04  ; send frame to wire
NET_CTRL_CS_BEGIN	 EQU	 $08  ; begin calculating IP checksum
NET_CTRL_CS_SETADDR	 EQU	 $10  ; set address to store checksum to
NET_CTRL_CS_END		 EQU	 $20  ; store checksum

NET_STATUS_RX_VALID	 EQU	 $80  ; frame received and available for reading
NET_STATUS_TX_BUSY	 EQU	 $40  ; tx unit is busy transmitting the last frame

LED					 DSOUT $80
SERIAL				 DSOUT $40

; constants
tcp_port	   EQU	 80
stack  		   EQU   $33 ; first free stack byte

; variables used for packet parsing
dmac   		   EQU	 $00
smac   		   EQU	 $06

; variables used for arp replies
arp_static	   EQU	 $10 ; 7b
arp_source	   EQU	 $17 ; 10b

; varibales used for ip
ip_saddr	   EQU	 $10 ; 4b

; variables used for tcp
tcp_sport	   EQU	 $14 ; 2b - source port sent by client
tcp_seq		   EQU	 $18 ; 4b - sequence number sent by client
tcp_ack		   EQU	 $1C ; 4b - ack number sent by client

; global variables
tcp_peer 	   EQU	 $34 ; hash to identify remote peer
tcp_state	   EQU	 $35 ; tcp connection state (0 = listen, 1 = syn received, 2 = established)
mymac  		   EQU	 $36
myip   		   EQU	 $3C

; simulator is buggy. first port read is always zero
;in	  s0, NET_READ

; start to reset ethernet adapter
load	s0, NET_CTRL_RST
out		s0, NET_CTRL

; store my ip and mac in memory
load	s0, 10
store	s0, myip
load	s0, 0
store	s0, myip + 1
load	s0, 0
store	s0, myip + 2
load	s0, 2
store	s0, myip + 3
load	s0, $80
store	s0, mymac
load	s0, $86
store	s0, mymac + 1
load	s0, $f2
store	s0, mymac + 2
load	s0, $08
store	s0, mymac + 3
load	s0, $ec
store	s0, mymac + 4
load	s0, $92
store	s0, mymac + 5

; initical tcp state
load	s0, 0
store	s0, tcp_peer
store	s0, tcp_state

load	sF, stack

load	s0, 0	 	  ; stop ethernet adapter reset
out		s0, NET_CTRL

jump	NEXT_PACKET_WAIT_LOOP  ; skip read done ctrl for first packet
NEXT_PACKET:
load	s0, NET_CTRL_READ_DONE
out		s0, NET_CTRL
NEXT_PACKET_WAIT_LOOP:
in		s0, NET_STATUS
test	s0, NET_STATUS_RX_VALID
jump	Z, NEXT_PACKET_WAIT_LOOP

; read mac to mem
load  s0, 12
load  s1, dmac
call READ_NET

; read frame type. 0800 = IPv4, 0806 = ARP
in     s0, NET_READ
comp   s0, 8
jump   NZ, NEXT_PACKET
in     s0, NET_READ
comp   s0, 0
jump   Z, IP
comp   s0, 6
jump   Z, ARP
jump   NEXT_PACKET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ARP reply
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; stack variables

ARP:
; this is an arp frame
load   s0, 7
load   s1, arp_static
call   READ_NET
in	   s0, NET_READ
comp   s0, 1  	 ; arp request
jump   NZ, NEXT_PACKET

; read source ip and mac to mem
load   s0, 10
load   s1, arp_source
call   READ_NET

; scip search mac (00:00:00:00:00:00)
load   s0, 6
call   SKIP_NET
; compare query IP to my IP
load   s0, 4
load   s1, myip
call   COMPARE_NET
test   s2, 1
jump   Z, NEXT_PACKET

; this is indeed an ARP request targeted at us.
load   s4, 6 ; ARP protocol id
call   WRITE_ETHERNET
load   s0, 7
load   s1, arp_static
call   WRITE_NET	 ; first static 7b of arp packet
load   s0, 2
out	   s0, NET_WRITE	 ; arp type 2 == reply
load   s0, 10
load   s1, mymac	
call   WRITE_NET	 ; arp source mac and ip
load   s0, 10
load   s1, arp_source
call   WRITE_NET	 ; arp target mac and ip

load   s0, NET_CTRL_SEND_FRAME
out	   s0, NET_CTRL
jump   NEXT_PACKET	 ; done

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IP packet
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; sE: header size
; sC, sD: payload size
IP:
in     sE, NET_READ ; read and extract packet header size
and	   sE, $F
sl0	   sE
sl0	   sE  	   ; len *= 4
in	   s0, NET_READ ; ignored
in	   sC, NET_READ
in	   sD, NET_READ
sub	   sD, sE
subc   sC, 0   ; payload len = total len - header len
load   s0, 5
call   SKIP_NET ; ignore 5 bytes
in	   sA, NET_READ	; read protocol number
load   s0, 2
call   SKIP_NET ; ignore checksum
load   s0, 4
load   s1, ip_saddr
call   READ_NET ; read source ip
load   s0, 4
load   s1, myip
call   COMPARE_NET ; compare ip address
test   s2, 1
jump   Z, NEXT_PACKET ; skip packet if not addressed to us
load   s0, sE
sub	   s0, 20
call   SKIP_NET ; ignore remaining header in case there is an optional one

; check protocol id
comp   sA, 1
jump   Z, IP_ICMP
comp   sA, 6
jump   Z, IP_TCP
jump   NEXT_PACKET	 ; unknown layer 4 protocol

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IP_ICMP:
comp	sC, 0
jump	NZ, NEXT_PACKET	; drop packets larger than 255 bytes
in		s0, NET_READ
comp	s0, 8  		   ; icmp echo = 8
jump	NZ, NEXT_PACKET
load	s0, 3
call	SKIP_NET	   ; skip code and checksum

; write ip header
load	s5, 1
load	s6, sC	
load	s7, sD	 	   	; reply package has same payload length as request
call	WRITE_IP_HEAD

; write ICMP packet
load	s0, NET_CTRL_CS_BEGIN
out		s0, NET_CTRL
load	s3, 0
out		s3, NET_WRITE	 	 ; ICMP type 0 = echo reply
out		s3, NET_WRITE		 ; ICMP code

load	s0, NET_CTRL_CS_SETADDR
out		s0, NET_CTRL
out		s3, NET_WRITE
out		s3, NET_WRITE		 ; ICMP checksum
sub		sD, 4		 		 ; payload size = icmp packet size - 4b for echo header
IP_ICMP_ECHO_LOOP:
in		s0, NET_READ
out		s0, NET_WRITE
sub		sD, 1
jump	NZ, IP_ICMP_ECHO_LOOP

load	s0, NET_CTRL_CS_END
out		s0, NET_CTRL
load	s0, NET_CTRL_SEND_FRAME
out		s0, NET_CTRL
jump   NEXT_PACKET; done

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IP_TCP:
load   s0, 3			; read two bytes and skip one
load   s1, tcp_sport
call   READ_NET			; read source port for reply
in	   s0, NET_READ
comp   s0, tcp_port
jump   NZ, NEXT_PACKET	; compare destination port to our port number (80)
load   s0, 8
load   s1, tcp_seq
call   READ_NET	  		; read seq and ack number
in	   s4, NET_READ		; read data offset
sr0	   s4
sr0	   s4
in	   s5, NET_READ		; read flags
fetch  s0, tcp_state
comp   s0, 0
jump   Z, TCP_LISTEN

; check seq number if not in listen state
; this may be due to another connection packet or packet loss
; we will have to request a resend in case of packet loss
fetch  s1, tcp_seq
fetch  s2, tcp_peer
comp   s1, s2
jump   NZ, NEXT_PACKET	  
test	s5, $10
jump	Z, TCP_RESET_STATE ; reset connection if no ACK

comp   s0, 1
jump   Z, TCP_SYNSENT
comp   s0, 2
jump   Z, TCP_CONNECTED
jump   NEXT_PACKET

;; TCP state connected
TCP_CONNECTED:
load	s0, s4
sub		s0, 14		  ; we already read 14b of tcp header
call	SKIP_NET	  ; skip tcp header
sub		sD, s4
subc	sC, 0 		  ; sub tcp header from ip payload size
jump	HTTP_PARSE	  ; begin content parsing

;; TCP state syn sent
TCP_SYNSENT:
; we should check some data here but there is no reply and no sync increment during hanshake
jump	TCP_NEXT_STATE

;; TCP state listen
TCP_LISTEN:
test	s5, 2	   		; check syn flag
jump	Z, NEXT_PACKET	; only accept new connections in listen state

; generate new sequence number
fetch	s0, tcp_seq
fetch	s1, tcp_seq + 1
fetch	s2, tcp_seq + 2
fetch	s3, tcp_seq + 3
xor		s0, $55
xor		s1, $A7
xor		s2, $48
xor		s3, $87		   		  ; some renadom keys for randomisation
store	s0, tcp_ack
store	s1, tcp_ack + 1
store	s2, tcp_ack + 2
store	s3, tcp_ack + 3

load	s6, 0
load	s7, 0			; no payload
load	s8, $12			; ACK, SYN
call	WRITE_TCP_HEAD

load	s1, NET_CTRL_CS_END
out		s1, NET_CTRL
load	s1, NET_CTRL_SEND_FRAME
out		s1, NET_CTRL
jump	TCP_NEXT_STATE	; nop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

TCP_NEXT_STATE:
; change state
fetch	s0, tcp_state
add		s0, 1
store	s0, tcp_state
jump    NEXT_PACKET  ; done

TCP_RESET_STATE:
load	s0, 0
store	s0, tcp_state
jump	NEXT_PACKET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; HTTP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
HTTP_PARSE:
; simple echo function as dummy
load	s6, sC
load	s7, sD
load	s8, $10		   ; ACK
call	WRITE_TCP_HEAD

ECHO_LOOP:
load	s0, s6
or		s0, s7
jump	Z, HTTP_PARSE_SEND_PACKET
in		s0, NET_READ
out		s0, NET_WRITE
sub		s7, 1
subc	s6, 0
jump	ECHO_LOOP

HTTP_PARSE_SEND_PACKET:
load	s1, NET_CTRL_CS_END
out		s1, NET_CTRL
load	s1, NET_CTRL_SEND_FRAME
out		s1, NET_CTRL
jump	NEXT_PACKET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; s0!, s1!, s2!, s3!, s4!, s5!
; s6!, s7! - payload length
; s8 - tcp flags
WRITE_TCP_HEAD:
load	s5, 6			; tcp
add		s7, 20			; add tcp header size
addc	s6, 0
call	WRITE_IP_HEAD

load	s1, NET_CTRL_CS_BEGIN
out		s1, NET_CTRL

load	s5, 0
out		s5, NET_WRITE
load	s0, tcp_port
out		s0, NET_WRITE	 	; source port
load	s0, 2
load	s1, tcp_sport
call	WRITE_NET	 	; destination port
load	s0, 4
load	s1, tcp_ack
call	WRITE_NET  		; send received ack as sequence (may be changed)

; calc ack number
fetch   s0, tcp_seq
fetch   s1, tcp_seq + 1
fetch   s2, tcp_seq + 2
fetch   s3, tcp_seq + 3
add		s3, 1
addc	s2, 0
addc	s1, 0
addc	s0, 0
out		s0, NET_WRITE
out		s1, NET_WRITE
out		s2, NET_WRITE
out		s3, NET_WRITE
store	s3, tcp_peer

load	s0, $50
out		s0, NET_WRITE	; header size
out		s8, NET_WRITE	; tcp flags
load	s0, 2
out		s0, NET_WRITE
load	s0, 128
out		s0, NET_WRITE	; 640b window size
load	s0, 0
out		s0, NET_WRITE

load	s1, NET_CTRL_CS_SETADDR
out		s1, NET_CTRL
out		s0, NET_WRITE	; checksum
out		s0, NET_WRITE

out		s0, NET_WRITE	; urgent pointer
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WRITE_IP_HEAD:
; s0!, s1!, s2!, s3!, s4!
; s5 - protocol id (1 = ICMP, 6 = TCP)
; s6!, s7! - payload length
load    s4, 0 ; IP protocol id
call    WRITE_ETHERNET

load	s0, NET_CTRL_CS_BEGIN
out		s0, NET_CTRL
load	s0, $45
out		s0, NET_WRITE	 	 ; ip version and header size
load	s3, 0
out		s3, NET_WRITE		 ; DSCP, ECN
add		s7, 20
addc	s6, 0
out		s6, NET_WRITE
out		s7, NET_WRITE		 ; total length (header + payload)
load	s0, $55
out		s0, NET_WRITE
out		s0, NET_WRITE		 ; IP identification
out		s3, NET_WRITE		 ; flags
out		s3, NET_WRITE		 ; fragment offset
load	s0, 128		
out		s0, NET_WRITE		 ; TTL
load	s0, 1
out		s5, NET_WRITE		 ; protocol

load	s0, NET_CTRL_CS_SETADDR
out		s0, NET_CTRL
out		s3, NET_WRITE
out		s3, NET_WRITE		 ; checksum

load	s0, 4
load	s1, myip
call	WRITE_NET	 ; source ip
load	s0, 4
load	s1, ip_saddr ; destination ip
call	WRITE_NET

load	s0, NET_CTRL_CS_END
out		s0, NET_CTRL
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WRITE_ETHERNET:
; s0!, s1!, s2!
; s4 - protocol low byte (0 = IP, 6 = ARP)
in	   s0, NET_STATUS
test   s0, NET_STATUS_TX_BUSY
jump   NZ, WRITE_ETHERNET	  	  ; wait until network adapter is ready for new frame

load   s0, 6
load   s1, smac	
call   WRITE_NET	 ; destination mac
load   s0, 6
load   s1, mymac
call   WRITE_NET	 ; source mac
load   s0, 8
out	   s0, NET_WRITE		 ; protocol type high
out	   s4, NET_WRITE		 ; protocol type low
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SKIP_NET:
; s0! - number of bytes to skip
; s1!
comp  	s0, 0
SKIP_NET_LOOP:
ret		Z
in		s1, NET_READ
sub		s0, 1
jump	SKIP_NET_LOOP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
READ_NET:
; s0! - bytes to read
; s1! - address to store to (s1 + s0 after execution)
; s2!
in	  	s2, NET_READ
store	s2, s1
add		s1, 1
sub		s0, 1
jump	NZ, READ_NET
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
WRITE_NET:
; s0! - bytes to write
; s1! - address to load from (s1 + s0 after execution)
; s2!
fetch 	s2, s1
out		s2, NET_WRITE
add		s1, 1
sub		s0, 1
jump	NZ, WRITE_NET
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
COMPARE_NET:
; s0! - bytes to read
; s1! - address to load from (s1 + s0 after execution)
; s2! - returns 1 if equal and 2 if equal to FF
; s3!
; s4!
load  	s2, 3
COMPARE_NET_LOOP:
in	  	s3, NET_READ
comp	s3, $FF
jump	Z, COMPARE_NET_TEST
and		s2, $FD ; ~2
COMPARE_NET_TEST:
fetch 	s4, s1
comp	s4, s3
jump	Z, COMPARE_NET_NEXT
and		s2, $FE ; ~1
COMPARE_NET_NEXT:
add		s1, 1
sub		s0, 1
jump	NZ, COMPARE_NET_LOOP
ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


